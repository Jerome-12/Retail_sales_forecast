"""Retail Sales Forecast.ipynb

Automatically generated by Colab.

# Retail Sales Forecast
"""

# Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import statsmodels.api as sm

# Load the datasets
features = pd.read_csv('/content/Features_data_set.csv', parse_dates=['Date'], dayfirst=True)
sales = pd.read_csv('/content/sales_data_set.csv', parse_dates=['Date'], dayfirst=True)
stores = pd.read_csv('/content/stores_data_set.csv')

features.info()

features['Date'].head()

sales.info()

stores.info()

features['IsHoliday'].head(5)

sales['IsHoliday'].head(5)

# Merge datasets on Store and Date for sales analysis
data = pd.merge(sales, features, on=['Store', 'Date'], how='inner')

# merge with store data to include store Type and Size
stores.rename(columns={'Type': 'Store_Type'}, inplace=True)
data = pd.merge(data, stores, on='Store', how='inner')

data.info()

# Count the number of True and False in the IsHoliday_x column
holiday_counts = data['IsHoliday_x'].value_counts()

print(holiday_counts)

# number of True and False in the IsHoliday_y column
holiday_count = data['IsHoliday_y'].value_counts()

print(holiday_count)

# Drop the IsHoliday_y column
data = data.drop(columns=['IsHoliday_y'])

# Replace True with 1 and False with 0 in IsHoliday_x
data['IsHoliday_x'] = data['IsHoliday_x'].astype(int)

print(data[['IsHoliday_x']].head())

data.info()

# Create Week column
data['Week'] = data['Date'].dt.to_period('W').apply(lambda r: r.start_time)

# Aggregate weekly sales by Store, Dept, and Week
weekly_sales = data.groupby(['Store', 'Dept', 'Week']).agg({
    'Weekly_Sales': 'sum',
    'Temperature': 'mean',
    'Fuel_Price': 'mean',
    'IsHoliday_x': 'max',
    'MarkDown1': 'sum',
    'MarkDown2': 'sum',
    'MarkDown3': 'sum',
    'MarkDown4': 'sum',
    'MarkDown5': 'sum',
    'CPI': 'mean',
    'Unemployment': 'mean',
    'Size': 'first'
}).reset_index()

# Retrieve unique store types
store_types = data[['Store', 'Store_Type']].drop_duplicates()
weekly_sales = pd.merge(weekly_sales, store_types, on='Store', how='left')

weekly_sales.info()

weekly_sales['Store_Type'].head()

weekly_sales['Store_Type'].tail()

weekly_sales['Store_Type'].unique()

# Number of True and False in the IsHoliday_x column
ws_counts = weekly_sales['Store_Type'].value_counts()

print(ws_counts)

# Replace A, B, C with 0, 1, 2 in the Store_Type column
weekly_sales['Store_Type'] = weekly_sales['Store_Type'].replace({'A': 0, 'B': 1, 'C': 2})

weekly_sales[['Store_Type']].head()

weekly_sales.info()

# Handle missing values in MarkDown columns
for markdown in ['MarkDown1', 'MarkDown2', 'MarkDown3', 'MarkDown4', 'MarkDown5']:
    weekly_sales.loc[:, markdown] = weekly_sales[markdown].fillna(0)

# Create lagged feature for Weekly Sales
weekly_sales['Lag_Weekly_Sales'] = weekly_sales.groupby(['Store', 'Dept'])['Weekly_Sales'].shift(1)

# Drop rows with NaN values created during lagging
weekly_sales.dropna(inplace=True)

# features and target variable
required_features = [
    'Lag_Weekly_Sales',
    'Temperature',
    'Fuel_Price',
    'IsHoliday_x',
    'MarkDown1',
    'MarkDown2',
    'MarkDown3',
    'MarkDown4',
    'MarkDown5',
    'Size',
    'Store_Type',
]

# Prepare the training data
X = weekly_sales.loc[:, required_features]
y = weekly_sales['Weekly_Sales']

# Convert columns in X to numeric
for column in X.columns:
    X.loc[:, column] = pd.to_numeric(X[column], errors='coerce')

# Check - NaN values
X.dropna(inplace=True)
y = y[X.index]

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Model predictive analysis using OLS regression
X_train_sm = sm.add_constant(X_train)
model = sm.OLS(y_train, X_train_sm).fit()

# Print regression summary
print("Regression Model Summary:")
print(model.summary())

# Make predictions on test data
X_test_sm = sm.add_constant(X_test)
predictions = model.predict(X_test_sm)

# Print predicted values
print("Predicted Weekly Sales:")
print(predictions)

"""#Task 1 : Predict the department-wide sales for each store for the following year"""

# Generate dates for the next year
last_week = weekly_sales['Week'].max()
next_year_dates = pd.date_range(start=last_week + pd.offsets.Week(1), periods=52, freq='W-SAT')

# Create a DataFrame for predictions
predictions_df = pd.DataFrame(next_year_dates, columns=['Week'])

# Expand for all store-department combinations
store_dept_combinations = weekly_sales[['Store', 'Dept']].drop_duplicates()
predictions_df = predictions_df.assign(key=1).merge(store_dept_combinations.assign(key=1), on='key').drop('key', axis=1)

# Add Avg values for each feature based on historical data
avg_temperature = weekly_sales['Temperature'].mean()
avg_fuel_price = weekly_sales['Fuel_Price'].mean()
avg_markdowns = {
    'MarkDown1': weekly_sales['MarkDown1'].mean(),
    'MarkDown2': weekly_sales['MarkDown2'].mean(),
    'MarkDown3': weekly_sales['MarkDown3'].mean(),
    'MarkDown4': weekly_sales['MarkDown4'].mean(),
    'MarkDown5': weekly_sales['MarkDown5'].mean()
}

# Fill in the predictions DataFrame
predictions_df['Temperature'] = avg_temperature
predictions_df['Fuel_Price'] = avg_fuel_price
predictions_df['IsHoliday_x'] = 0  # Assume no holidays

for markdown, value in avg_markdowns.items():
    predictions_df[markdown] = value

# Add store size and store type
predictions_df = predictions_df.merge(stores[['Store', 'Size', 'Store_Type']], on='Store', how='left')
predictions_df['Store_Type'] = predictions_df['Store_Type'].replace({'A': 0, 'B': 1, 'C': 2})

# Add Lag_Weekly_Sales (using last known sales)
last_weekly_sales = weekly_sales.groupby(['Store', 'Dept'])['Weekly_Sales'].last().reset_index()
last_weekly_sales.rename(columns={'Weekly_Sales': 'Lag_Weekly_Sales'}, inplace=True)
predictions_df = predictions_df.merge(last_weekly_sales, on=['Store', 'Dept'], how='left')

# Prepare features for prediction
X_predictions = predictions_df[[
    'Lag_Weekly_Sales',
    'Temperature',
    'Fuel_Price',
    'IsHoliday_x',
    'MarkDown1',
    'MarkDown2',
    'MarkDown3',
    'MarkDown4',
    'MarkDown5',
    'Size',
    'Store_Type'
]]

# Convert to numeric for prediction
for column in X_predictions.columns:
    X_predictions[column] = pd.to_numeric(X_predictions[column], errors='coerce')

# Add constant for prediction model
X_predictions_sm = sm.add_constant(X_predictions, has_constant='add')

# Make predictions
predictions_df['Predicted_Weekly_Sales'] = model.predict(X_predictions_sm)

# Print the results
print("Predicted Weekly Sales for Each Store and Dept for Next Year:")
print(predictions_df[['Week', 'Store', 'Dept', 'Predicted_Weekly_Sales']])

predictions_df.to_csv('predicted_weekly_sales.csv', index=False)

"""#Task 3 : Provide recommended actions based on the insights drawn, with prioritization placed on largest business impact"""

# Analyze significance and provide recommendations
significant_threshold = 0.05  # p-value threshold for significance
significant_predictors = model.pvalues[model.pvalues < significant_threshold]

print("Recommended Actions Based on Overall Insights:")
for predictor, p_value in significant_predictors.items():
    print(f"- Focus on {predictor} for improving overall sales (p-value: {p_value:.4f})")

if significant_predictors.empty:
    print("No significant predictors found for overall sales.")

"""#Task 2 : Model the effects of markdowns on holiday weeks"""

# Analyze holiday sales
holiday_sales = weekly_sales[weekly_sales['IsHoliday_x'] == 1]
if not holiday_sales.empty:
     X_holiday = holiday_sales[required_features]
     y_holiday = holiday_sales['Weekly_Sales']

# Prepare the data and fit the OLS regression model for holidays
X_holiday = X_holiday.apply(pd.to_numeric, errors='coerce')
y_holiday = pd.to_numeric(y_holiday, errors='coerce')

# Drop missing values
X_holiday.dropna(inplace=True)
y_holiday = y_holiday[X_holiday.index]

# OLS regression for holiday sales
X_holiday_sm = sm.add_constant(X_holiday)
holiday_model = sm.OLS(y_holiday, X_holiday_sm).fit()

# Output holiday model results
print("Holiday Sales Regression Model Summary:")
print(holiday_model.summary())

